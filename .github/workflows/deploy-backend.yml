name: Deploy Backend

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_run:
    branches:
      - main
    workflows: ['Deploy Infrastructure']
    types:
      - completed

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    if: |
      github.event_name == 'push' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_DEPLOYMENT_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get CloudFormation Outputs
        id: get_outputs
        run: |
          OUTPUTS=$(aws cloudformation describe-stacks --stack-name GoogleMeetsChromeExtension-Stack --query "Stacks[0].Outputs" --output json)
          echo "OUTPUTS_JSON=$OUTPUTS" >> $GITHUB_ENV

      - name: Extract EC2 Public IP
        id: extract_ip
        run: |
          INSTANCE_IP=$(echo '${{ env.OUTPUTS_JSON }}' | jq -r '.[] | select(.Description == "Public IP of the EC2 Instance") | .OutputValue')
          echo "EC2 Public IP: $INSTANCE_IP"
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

      - name: Transfer application files to EC2
        run: |
          scp -i ${{ secrets.EC2_SSH_KEY }} \
            -o StrictHostKeyChecking=no \
            -r ./backend docker-compose.yml ec2-user@${{ env.INSTANCE_IP }}:/home/ec2-user/

      - name: Deploy application on EC2 using SSH
        run: |
          ssh -i ${{ secrets.EC2_SSH_KEY }} \
            -o StrictHostKeyChecking=no \
            ec2-user@${{ env.INSTANCE_IP }} << 'EOF'
            cd /home/ec2-user
            docker-compose up -d
          EOF
